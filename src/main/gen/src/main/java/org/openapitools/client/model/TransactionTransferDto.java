/*
 * Aston Bank Dto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DTO для перевода денег
 */
@ApiModel(description = "DTO для перевода денег")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-07T12:53:35.841140700+03:00[Europe/Moscow]")
public class TransactionTransferDto {
  public static final String SERIALIZED_NAME_ACCOUNT_TRANSFER_UUID = "accountTransferUuid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TRANSFER_UUID)
  private UUID accountTransferUuid;

  public static final String SERIALIZED_NAME_PIN = "pin";
  @SerializedName(SERIALIZED_NAME_PIN)
  private String pin;

  public static final String SERIALIZED_NAME_USER_UUID = "userUuid";
  @SerializedName(SERIALIZED_NAME_USER_UUID)
  private UUID userUuid;

  public static final String SERIALIZED_NAME_ACCOUNT_UUID = "accountUuid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_UUID)
  private UUID accountUuid;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public TransactionTransferDto() {
  }

  public TransactionTransferDto accountTransferUuid(UUID accountTransferUuid) {
    
    this.accountTransferUuid = accountTransferUuid;
    return this;
  }

   /**
   * Глобальный идентификатор счета получателя
   * @return accountTransferUuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Глобальный идентификатор счета получателя")

  public UUID getAccountTransferUuid() {
    return accountTransferUuid;
  }


  public void setAccountTransferUuid(UUID accountTransferUuid) {
    this.accountTransferUuid = accountTransferUuid;
  }


  public TransactionTransferDto pin(String pin) {
    
    this.pin = pin;
    return this;
  }

   /**
   * ПИН-код
   * @return pin
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ПИН-код")

  public String getPin() {
    return pin;
  }


  public void setPin(String pin) {
    this.pin = pin;
  }


  public TransactionTransferDto userUuid(UUID userUuid) {
    
    this.userUuid = userUuid;
    return this;
  }

   /**
   * Глобальный идентификатор пользователя
   * @return userUuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Глобальный идентификатор пользователя")

  public UUID getUserUuid() {
    return userUuid;
  }


  public void setUserUuid(UUID userUuid) {
    this.userUuid = userUuid;
  }


  public TransactionTransferDto accountUuid(UUID accountUuid) {
    
    this.accountUuid = accountUuid;
    return this;
  }

   /**
   * Глобальный идентификатор счета
   * @return accountUuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Глобальный идентификатор счета")

  public UUID getAccountUuid() {
    return accountUuid;
  }


  public void setAccountUuid(UUID accountUuid) {
    this.accountUuid = accountUuid;
  }


  public TransactionTransferDto amount(Double amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Сумма транзакции
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Сумма транзакции")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    this.amount = amount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionTransferDto transactionTransferDto = (TransactionTransferDto) o;
    return Objects.equals(this.accountTransferUuid, transactionTransferDto.accountTransferUuid) &&
        Objects.equals(this.pin, transactionTransferDto.pin) &&
        Objects.equals(this.userUuid, transactionTransferDto.userUuid) &&
        Objects.equals(this.accountUuid, transactionTransferDto.accountUuid) &&
        Objects.equals(this.amount, transactionTransferDto.amount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountTransferUuid, pin, userUuid, accountUuid, amount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionTransferDto {\n");
    sb.append("    accountTransferUuid: ").append(toIndentedString(accountTransferUuid)).append("\n");
    sb.append("    pin: ").append(toIndentedString(pin)).append("\n");
    sb.append("    userUuid: ").append(toIndentedString(userUuid)).append("\n");
    sb.append("    accountUuid: ").append(toIndentedString(accountUuid)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userUuid");
    openapiFields.add("accountUuid");
    openapiFields.add("amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountTransferUuid");
    openapiRequiredFields.add("pin");
    openapiRequiredFields.add("userUuid");
    openapiRequiredFields.add("accountUuid");
    openapiRequiredFields.add("amount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionTransferDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TransactionTransferDto.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionTransferDto is not found in the empty JSON string", TransactionTransferDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TransactionTransferDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionTransferDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionTransferDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("accountTransferUuid") != null && !jsonObj.get("accountTransferUuid").isJsonNull()) && !jsonObj.get("accountTransferUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountTransferUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountTransferUuid").toString()));
      }
      if ((jsonObj.get("pin") != null && !jsonObj.get("pin").isJsonNull()) && !jsonObj.get("pin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pin").toString()));
      }
      if ((jsonObj.get("userUuid") != null && !jsonObj.get("userUuid").isJsonNull()) && !jsonObj.get("userUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userUuid").toString()));
      }
      if ((jsonObj.get("accountUuid") != null && !jsonObj.get("accountUuid").isJsonNull()) && !jsonObj.get("accountUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountUuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionTransferDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionTransferDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionTransferDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionTransferDto.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionTransferDto>() {
           @Override
           public void write(JsonWriter out, TransactionTransferDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionTransferDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionTransferDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionTransferDto
  * @throws IOException if the JSON string is invalid with respect to TransactionTransferDto
  */
  public static TransactionTransferDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionTransferDto.class);
  }

 /**
  * Convert an instance of TransactionTransferDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

